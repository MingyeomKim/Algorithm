/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <cstring>
#include <tuple>
#include <queue>
using namespace std;

int dy[4] = {-1,1, 0, 0};
int dx[4] = {0, 0, 1, -1};

bool board[51][51];
bool visited[51][51];

int m, n; 
bool isOut(int y, int x) {
    return y < 0 || y >= n || x < 0 || x >= m;
}

void bfs(int sy, int sx) {
    visited[sy][sx] = true; 
    queue<pair<int,int>> q; 
    q.push(make_pair(sy, sx));
    while(!q.empty()) {
        int y, x; tie(y, x) = q.front(); 
        q.pop(); 
        for(int d = 0; d < 4;d++) {
            int ny= y + dy[d], nx = x + dx[d]; 
            if(isOut(ny, nx) || visited[ny][nx]) continue;
            if(board[ny][nx]) {
                q.push(make_pair(ny, nx));
                visited[ny][nx] = true;
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t; cin >> t;
    while (t--) {
        cin>> m >> n; 
        int k; cin >> k;
        memset(board, false,sizeof(board));
        for(int i = 0; i< k;i++) {
            int x, y; cin >> x >> y;
            board[y][x] = true;
        }
        memset(visited, false, sizeof(visited));
        int ret = 0; 
        for(int i = 0; i < n;i++) {
            for(int j =0; j < m;j++) {
                if(visited[i][j]) continue;
                if(board[i][j]) {
                    bfs(i, j); 
                    ret++;
                }
            }
        }
        cout << ret <<endl;
    }
    return 0;
}
