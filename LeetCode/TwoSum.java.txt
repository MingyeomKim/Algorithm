import java.util.*;

class Pair {
    private int value;
    private int index;

    public Pair(int value, int index) {
        this.value = value; 
        this.index = index;
    } 

    public int getValue() {
        return value;
    }

    public int getIndex() {
        return index;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        List<Pair> pairs = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            pairs.add(new Pair(nums[i], i));
        }
        Collections.sort(pairs, Comparator.comparingInt(pair -> pair.getValue()));

        int left = 0; 
        int right = nums.length - 1; 
        while(left <= right) {
            int sum = pairs.get(left).getValue() + pairs.get(right).getValue(); 
            if(sum < target) {
                left++;
            } else if(sum > target) {
                right--;
            } else {
                int[] answer = {pairs.get(left).getIndex(), pairs.get(right).getIndex()};
                return answer;
            }
        }
        return null;
    }
}

/*
problem: find indices of two numbers that sum is target
solution: 
    - sort
    - binary search
    - find two numbers which sum is target
*/