/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

problem: select two number in array. 
  - first number is lowest number
  - second number is highest number (first number index + 1 ~ array's last index)
  - first number's index is in front of second number's index
costraint:
  - 1 ~ 50,000 prices length
  - 0 ~ 4,000 
solution:
  1. O(n^2) O(1)
  for(int i = 0; i< n; i++) {
    for(int j = i + 1; j < n; j++) {
      int profit = prices[j] - prices[i];
      if(ans < profix) {
        ans = profix;
      }
    }
  }
  
  2. O(n) O(1)
   [7,1,5,3,6,4]
ans 0 0 4 4 5 5
min 7 1 1 1 1 1
= arr[i] - min
  * min number -> max number

   [6,3,1]
ans 0 0 0
min 6 3 1

   [7,1,5,3,6,4]
ans   1 5 3
min   1 1 1

DFS 
O(2^n)
O(1)
int ans;

   [1,2,3,4,5]
1 , 5 = 4

1 2, 2 3, 3 4, 4 5 = 4

  [5,4,3,2,1]
  0

  [1,2,1,4,3,4]
  (1, 2) = 1
  (1, 4) = 3

  [1,2,1,4,3,100]
  (1, 2)
  (1, 4)
  (3, 100)
 */


class Solution {
  public static void main(String[] args) {
    int[] prices = {7,6,4,3,1};
    int ans = maxProfit(prices);
    System.out.println("ans : " + ans);
  }

  public static int maxProfit(int[] prices) {
    // [7,1,4]
    int min = prices[0]; 
    int ans = 0; 
    int n = prices.length; 
    for(int i = 0; i < n; i++) {
      int diff = prices[i] - min; 
      ans = Math.max(ans, diff); 
      min = Math.min(min, prices[i]); 
    }
    return ans;
  }
}
